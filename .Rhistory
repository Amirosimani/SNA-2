mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel)
View(from)
View(selected)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
View(from)
top100 <- from[1:100,]
top100 <- top100[from != '']
View(top100)
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- a[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
recipients_sep <- recipients_sep[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
View(recipients_sep)
mat_sel <- cbind(selected$from, recipients_sep)
View(mat_sel)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel2 <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA']
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 25]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
View(mat_sel2)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
rm(mat_sel2)
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37]
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & v1 != '']
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata1)
View(cdata2)
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
View(cdata2)
View(cdata1)
recipients_sep <- recipients_sep[, list(V1, V2)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
rm(cdata)
View(cdata1)
View(cdata2)
View(cdata1)
cdata3 <- ddply(mat_sel, c("from", "V1","V2"), summarise,   N = length(from))
View(cdata3)
rm(cdata3)
rbind.fill(list(cdata1, cdata2)))
rbind.fill(list(cdata1, cdata2))
pp <- cbind(names=c(rownames(cdata1), rownames(cdata2)),
rbind.fill(list(cdata1, cdata2))
)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
library(igraph)
n <- 71
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- cc/APL
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- (cc/0.51)/(APL/1.54)
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
p <- 0.75
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
n <- 360000000
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
n <- 71
p <- 1
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
library(igprah)
library(igpraph)
library(igraph)
setwd("~/GitHub/SNA #2")
library(igraph)
library(stringdist)
library(dplyr)
graphized <- function(x){
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(x), directed=T)))
graph <- graph.adjacency(mat,mode="directed", weighted = TRUE)
return(graph)
}
simmilarity_index <- function(x, y){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
graph_classified <- graphized(classified)
graph_unclassified <- graphized(unclassified)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo_classified <- topo(graph_classified)
View(topo_classified)
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(g))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
a2 <- cbind(Row.Names = rownames(a2), a2)
newdata <- as.data.frame(matrixY)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
newdata <- newdata[ , which(names(newdata) %in% a2$Row.Names)]
cleaned_matrix <- as.matrix(newdata)
}
hless <- read.csv('hless.csv', sep = ",")
hless$X <- NULL
hless$reason <- NULL
graph_hless <- graphized(hless)
filtered.graph <- filter.on.degree(graph_hless, 200)
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(graph_hless))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
a2 <- cbind(Row.Names = rownames(a2), a2)
newdata <- as.data.frame(matrixY)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
newdata <- newdata[ , which(names(newdata) %in% a2$Row.Names)]
cleaned_matrix <- as.matrix(newdata)
}
filtered.graph <- filter.on.degree(graph_hless, 200)
View(hless)
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(hless), directed=T)))
hless_adj <- graph.adjacency(mat,mode="directed", weighted = TRUE)
hless <- graph.adjacency(mat,mode="directed", weighted = TRUE)
filter.on.degree <- function(matrixY, x) {
#finding nodes name based on the required degree
a <- as.data.frame(degree(hless))
colnames(a) <- c("deg")
a2 <- subset(a, deg > x)
a2 <- cbind(Row.Names = rownames(a2), a2)
newdata <- as.data.frame(matrixY)
newdata <- cbind(Row.Names = rownames(newdata), newdata)
newdata <- newdata[newdata$Row.Names %in% a2$Row.Names, ]
newdata <- newdata[ , which(names(newdata) %in% a2$Row.Names)]
cleaned_matrix <- as.matrix(newdata)
}
filtered.graph <- filter.on.degree(mat, 200)
g2 <- graph.adjacency(cleaned.termMatrix, weighted=T, mode = "undirected")
g2 <- graph.adjacency(filtered.graph, weighted=T, mode = "directed")
filtered.graph <- filter.on.degree(mat, 300)
View(filtered.graph)
filtered.graph <- filter.on.degree(mat, 100)
View(filtered.graph)
filtered.graph <- filter.on.degree(mat, 50)
filtered.graph <- filter.on.degree(mat, 25)
View(filtered.graph)
filtered.graph <- filter.on.degree(mat, 20)
filtered.graph <- filter.on.degree(mat, 10)
View(filtered.graph)
g2 <- graph.adjacency(filtered.graph, weighted=T, mode = "directed")
fgn = edge.betweenness.community (g2, directed = TRUE, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=50,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(graph_hless)$name
fb <- cbind(traits,girvan, rw)
View(fb)
fwt <- walktrap.community(g2, steps=10,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(graph_hless)$name
fb <- cbind(traits,girvan, rw)
View(fb)
plot(fgn, graph_hless)
plot(fwt, graph_hless)
filtered.graph <- filter.on.degree(mat, 20)
g2 <- graph.adjacency(filtered.graph, weighted=T, mode = "directed")
fgn = edge.betweenness.community (g2, directed = TRUE, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=10,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(graph_hless)$name
fb <- cbind(traits,girvan, rw)
rm(fb)
fb <- cbind(traits,girvan, rw)
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(g2)$name
fb <- cbind(traits,girvan, rw)
View(fb)
plot(fgn, graph_hless)
plot(fgn, g2)
plot(fwt, g2)
V(g2)$degree <- degree(g2)
plot(fgn, g2)
V(g2)$size=degree(g2)/5
plot(fgn, g2)
V(g2)$size=degree(g2)
plot(fgn, g2)
V(g2)$size=degree(g2)*5
plot(fgn, g2)
V(g2)$size=degree(g2)
plot(fgn, g2)
plot(fgn, g2,  edge.arrow.size=0.3,)
plot(fgn, g2,  edge.arrow.size=0.2,)
V(g2)$size=degree(g2)/2
plot(fgn, g2,  edge.arrow.size=0.2,)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2))
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/10)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/100)
View(fb)
V(g2)$size= 5
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/100)
V(g2)$size= 50
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/100)
V(g2)$size= 20
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/100)
V(g2)$size= 15
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/100)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/80)
pdf("fgn2.pdf")
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/80)
dev.off()
filtered.graph <- filter.on.degree(mat, 10)
g2 <- graph.adjacency(filtered.graph, weighted=T, mode = "directed")
fgn = edge.betweenness.community (g2, directed = TRUE, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=10,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(g2)$name
fb <- cbind(traits,girvan, rw)
V(g2)$degree <- degree(g2)
V(g2)$size=degree(g2)/2
E(g2)$color <- "grey"
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/80)
View(fb)
fwt <- walktrap.community(g2, steps=5,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
fb <- cbind(traits,girvan, rw)
View(fb)
V(g2)$size=degree(g2)/20
E(g2)$color <- "grey"
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/80)
E(g2)$color <- "grey"
vertex.label.cex = degree(g2)/20)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/20)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/50)
plot(fgn, g2,  edge.arrow.size=0.2)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/50)
plot(fwt, g2)
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/50)
filtered.graph <- filter.on.degree(mat, 15)
g2 <- graph.adjacency(filtered.graph, weighted=T, mode = "directed")
fgn = edge.betweenness.community (g2, directed = TRUE, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
fwt <- walktrap.community(g2, steps=5,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
traits = V(g2)$name
fb <- cbind(traits,girvan, rw)
View(fb)
V(g2)$degree <- degree(g2)
V(g2)$size=degree(g2)/20
E(g2)$color <- "grey"
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/50)
pdf("fgn2.pdf")
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/50)
dev.off()
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = degree(g2)/25)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 10
)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 5)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 1)
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
pdf("fgn2.pdf")
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
pdf("fwt.pdf")
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5)
dev.off()
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5)
E(g2)$color <- "white"
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
E(g2)$color <- "grey"
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5)
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
V(g2)$size[degree(g2) > 50 ] <- 15
g
g
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
V(g2)$size[degree(g2) < 50 ] <- degree(g2)/10
V(g2)$size[degree(g2) < 50 ] <- (degree(g2)/10)
V(g2)$size= 15
pdf("fgn.pdf")
plot(fgn, g2,  edge.arrow.size=0.2,
vertex.label.cex = 0.5)
dev.off()
pdf("fwt.pdf")
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
dev.off()
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo(g2)
layout1 <- layout.fruchterman.reingold(graph_hless)
plot(g2,
layout=layout1,
edge.arrow.size=.1)
plot(g2,
layout=layout1,
edge.arrow.size=.1
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA
)
layout=layout1,
plot(g2,
layout=layout1,
edge.arrow.size=0.1
vertex.shape="none",
plot(g2,
layout=layout1,
edge.arrow.size=0.1,
vertex.shape="none",
vertex.label.cex = degree(g2)/100,
vertex.label = ifelse(degree(g2) > 1, V(g2)$label, NA
)
)
plot(g2,
layout=layout1,
edge.arrow.size=0.1,
vertex.shape="none",
vertex.label.cex = degree(g2)/100
)
plot(g2,
layout=layout1,
edge.arrow.size=0.1,
vertex.label.cex = degree(g2)/100
)
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
View(fb)
fwt <- walktrap.community(g2, steps=10,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
compare(fgn, fwt, method= c("rand"))
rw = data.frame(fwt$membership)
fb <- cbind(traits,girvan, rw)
View(fb)
fwt <- walktrap.community(g2, steps=30,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
fb <- cbind(traits,girvan, rw)
View(fb)
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
fwt <- walktrap.community(g2, steps=20,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
fb <- cbind(traits,girvan, rw)
View(fb)
fwt <- walktrap.community(g2, steps=25,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
rw = data.frame(fwt$membership)
fb <- cbind(traits,girvan, rw)
View(fb)
pdf("fwt.pdf")
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
dev.off()
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
fb <- cbind(traits,girvan, rw)
pdf("fwt.pdf")
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
dev.off()
pdf("fwt.pdf")
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
dev.off()
plot(fwt, g2, edge.arrow.size=0.2,
vertex.label.cex = 0.5, vertex.color = "grey")
View(fb)
write.table(fb, file = "memberships.csv")
