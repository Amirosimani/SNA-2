View(mat_sel)
mat_sel <- subset(mat_sel, V1 = NULL | from = NULL)
mat_sel <- subset(mat_sel, V1 == NULL | from == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NA )
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == "NA" )
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != 'NA']
mat_sel <- mat_sel[ V1 != 'NA' | from != '']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != '' | nchar(V1) < 15]
mat_sel <- mat_sel[ from != '']
mat_sel <- mat_sel[ nchar(V1) < 15 ]
View(mat_sel)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
a[, list(V1, V2, V3, V4, V5)]
a <- a[, list(V1, V2, V3, V4, V5)]
View(a)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel)
View(from)
View(selected)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
View(from)
top100 <- from[1:100,]
top100 <- top100[from != '']
View(top100)
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- a[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
recipients_sep <- recipients_sep[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
View(recipients_sep)
mat_sel <- cbind(selected$from, recipients_sep)
View(mat_sel)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel2 <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA']
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 25]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
View(mat_sel2)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
rm(mat_sel2)
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37]
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & v1 != '']
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata1)
View(cdata2)
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
View(cdata2)
View(cdata1)
recipients_sep <- recipients_sep[, list(V1, V2)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
rm(cdata)
View(cdata1)
View(cdata2)
View(cdata1)
cdata3 <- ddply(mat_sel, c("from", "V1","V2"), summarise,   N = length(from))
View(cdata3)
rm(cdata3)
rbind.fill(list(cdata1, cdata2)))
rbind.fill(list(cdata1, cdata2))
pp <- cbind(names=c(rownames(cdata1), rownames(cdata2)),
rbind.fill(list(cdata1, cdata2))
)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
library(igraph)
library(stringdist)
library(dplyr)
setwd("~/GitHub/SNA #2")
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
### 2. create adjacency matrix ----
mat_classified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(classified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
# Create igraph object from this matrix
graph_classified <- graph.adjacency(mat_classified,mode="directed", weighted = TRUE)
graph_unclassified <- graph.adjacency(mat_unclassified,mode="directed", weighted = TRUE)
#node_names <- as.data.frame(V(hillary_graph)$name)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
"outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)"
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC)
"s = s[,c(1:8)]"
return(s)
}
a <- stuff(graph_unclassified)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
graphized <- function(x){
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(x), directed=T)))
graph <- graph.adjacency(mat,mode="directed", weighted = TRUE)
return(graph)
}
graph_classified <- graphized(classified)
graph_unclassified <- graphized(unclassified)
cntrlty_measures <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
s = s[,c(1:8)]
return(s)
}
centrality_classified <- cntrlty_measures(graph_classified)
View(centrality_classified)
topography <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(v,e,d)
return(topo)
}
topo(graph_classified)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(v,e,d)
return(topo)
}
topo(graph_classified)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo(graph_classified)
topo_classified <- topo(graph_classified)
topo_unclassified <- topo(graph_unclassified)
View(topo_unclassified)
View(topo_classified)
inClosenessU <- closeness(graph_unclassified, mode='in')
totalDegreeU <- degree(graph_unclassified)
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
bonU <- bonpow(graph_unclassified)
eigenU
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
#eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC)
return(s)
}
stuff(graph_unclassified)
eigenU <- evcent(graph_unclassified)
centrality_unclassified <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
centrality_unclassified <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
centrality_unclassified = centrality_unclassified[,c(1:8)]
corClassified <- cor(centrality_classified)
corUn <- cor(centrality_unclassified)
topo_unclassified <- topo(graph_unclassified)
setwd("~/GitHub/SNA #2")
library(igraph)
library(dplyr)
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
graphized <- function(x){
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(x), directed=T)))
graph <- graph.adjacency(mat,mode="directed", weighted = TRUE)
return(graph)
}
graph_classified <- graphized(classified)
graph_unclassified <- graphized(unclassified)
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo_classified <- topo(graph_classified)
topo_unclassified <- topo(graph_unclassified)
summary(topo_classified)
summary(topo_classified)
View(topo_classified)
View(topo_unclassified)
\includegraphics{/Users/Amiros/Desktop/sql.png}
image 1- Initial data
\end{center}
devtools::install_github("rstudio/rmarkdown")
devtools::install_github(c('yihui/knitr', 'rstudio/rmarkdown'))
cntrlty_measures <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
s = s[,c(1:8)]
return(s)
}
centrality_classified <- cntrlty_measures(graph_classified)
View(centrality_classified)
corClassified <- cor(centrality_classified)
View(corClassified)
print(corClassified)
```
setwd("~/GitHub/SNA #2")
library(igraph)
library(stringdist)
library(dplyr)
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
library(igraph)
library(stringdist)
library(dplyr)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
### 2. create adjacency matrix ----
graphized <- function(x){
mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(x), directed=T)))
graph <- graph.adjacency(mat,mode="directed", weighted = TRUE)
return(graph)
}
graph_classified <- graphized(classified)
graph_unclassified <- graphized(unclassified)
#node_names <- as.data.frame(V(hillary_graph)$name)
### 3. overall topography of the network ----
topo <- function(x){
nodes <- vcount(x)
edges <- ecount(x)
density <- graph.density(x, loops = T)
topo <- data.frame(nodes,edges,density)
return(topo)
}
topo_classified <- topo(graph_classified)
topo_unclassified <- topo(graph_unclassified)
### 4. centrality measures ----
cntrlty_measures <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
s = s[,c(1:8)]
return(s)
}
centrality_classified <- cntrlty_measures(graph_classified)
#for unclassified network
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
#bonU <- bonpow(graph_unclassified)
centrality_unclassified <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
centrality_unclassified = centrality_unclassified[,c(1:8)]
# correlate the measures
corClassified <- cor(centrality_classified)
corUn <- cor(centrality_unclassified)
```
> **Describe the social network(s) to me, in terms of how it was collected, what it represents and so forth. Also give me basic topography of the network: the nature of the ties; direction of ties; overall density; and if attributes are with the network, the distribution of the categories and variables of those attributes.**
I have downloaded the publicly available dataset of Hillary’s emails. It is a SQL file containing more than 41K emails. Each row, is an email containing the body of email in addition to meta data such as sender, recipents, classification (image 1).
View(corUn)
View(centrality_classified)
a <- centrality_classified[order(inClosenessC),]
a <- centrality_classified[order(inClosenessC),]
summary(centrality_classified)
colnames(centrality_classified)
a <- centrality_classified[order(inClosenessC),]
a <- centrality_classified[order(inClosenessC)]
a <- centrality_classified[order(centrality_classified$inClosenessC),]
b <- centrality_classified[order(centrality_classified$outClosenessC),]
c <- centrality_classified[order(centrality_classified$totalClosenessC),]
d <- centrality_classified[order(centrality_classified$betweennessC),]
e <- centrality_classified[order(centrality_classified$vector),]
View(a)
a <- centrality_classified[-order(centrality_classified$inClosenessC),]
a <- centrality_classified[order(-centrality_classified$inClosenessC),]
View(a)
a <- centrality_classified[order(centrality_classified$inClosenessC),]
View(a)
View(b)
View(c)
View(d)
View(e)
d <- centrality_classified[order(-centrality_classified$betweennessC),]
View(d)
e <- centrality_classified[order(-centrality_classified$vector),]
View(e)
centrality_classified <- centrality_classified[order(centrality_classified$totalDegreeC)]
centrality_classified <- centrality_classified[order(centrality_classified$totalDegreeC)]
centrality_classified <- centrality_classified[order(centrality_classified$totalDegreeC),]
View(centrality_classified)
View(centrality_unclassified)
View(classified)
View(centrality_classified)
centrality_classified <- centrality_classified[order(-centrality_classified$totalDegreeC),]
View(centrality_classified)
View(centrality_classified)
View(corClassified)
View(classified)
View(unclassified)
View(edge_classification)
hless <- <-edge_classification[!(edge_classification$from=="h" & edge_classification$V1=="h"),]
hless <- edge_classification[!(edge_classification$from=="h" & edge_classification$V1=="h"),]
View(hless)
hless <- edge_classification[!(edge_classification$from!="h" & edge_classification$V1!="h"),]
View(hless)
hless <- edge_classification[!(edge_classification$from!="h" | edge_classification$V1!="h"),]
View(hless)
hless <- edge_classification[!(edge_classification$from!="h"),]
View(hless)
hless <- edge_classification[(edge_classification$from!="h"),]
View(hless)
hless <- edge_classification[(edge_classification$from!="h" & edge_classification$V1!="h"),]
View(hless)
colnames(hless)
hless_classified <- hless[ is.na(hless$reason),]
hless_classified <- hless_classified[c(1,2)]
hless_unclassified <- hless[ !is.na(hless$reason),]
hless_unclassified <- hless_unclassified[c(1,2)]
graph_hless <- graphized(hless_classified)
topo_hless <- topo(graph_hless)
View(topo_hless)
View(topo_classified)
centrality_hless <- cntrlty_measures(graph_hless)
inDegreeH <- degree(graph_hless, mode="in", loops = TRUE, normalized = FALSE)
outDegreeH <- degree(graph_hless, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeH <- degree(graph_hless)
inClosenessH <- closeness(graph_hless, mode='in')
outClosenessH <- closeness(graph_hless, mode='out')
totalClosenessH <- closeness(graph_hless)
betweennessH <- betweenness(graph_hless, directed = T)
eigenH <- evcent(graph_hless)
centrality_hless <- data.frame(inDegreeH, outDegreeH, totalDegreeH, inClosenessH, outClosenessH, totalClosenessH, betweennessH, eigenH)
centrality_hless = centrality_hless[,c(1:8)]
View(centrality_hless)
centrality_hless <- centrality_hless[order(centrality_hless$totalDegreeH),]
View(centrality_unclassified)
View(centrality_hless)
centrality_hless <- centrality_hless[order(-centrality_hless$totalDegreeH),]
View(centrality_unclassified)
View(centrality_hless)
corLess <- cor(centrality_hless)
View(corLess)
hless <- edge_classification[(edge_classification$from!="h" & edge_classification$V1!="h"),]
hless_classified <- hless[ is.na(hless$reason),]
hless_classified <- hless_classified[c(1,2)]
graph_hless <- graphized(hless_classified)
topo_hless <- topo(graph_hless)
centrality_hless <- cntrlty_measures()
inDegreeH <- degree(graph_hless, mode="in", loops = TRUE, normalized = FALSE)
outDegreeH <- degree(graph_hless, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeH <- degree(graph_hless)
totalDegreeH <- degree(graph_hless)
inClosenessH <- closeness(graph_hless, mode='in')
outClosenessH <- closeness(graph_hless, mode='out')
totalClosenessH <- closeness(graph_hless)
betweennessH <- betweenness(graph_hless, directed = T)
eigenH <- evcent(graph_hless)
centrality_hless <- data.frame(inDegreeH, outDegreeH, totalDegreeH, inClosenessH, outClosenessH, totalClosenessH, betweennessH, eigenH)
centrality_hless = centrality_hless[,c(1:8)]
centrality_hless <- centrality_hless[order(-centrality_hless$totalDegreeH),]
corLess <- cor(centrality_hless)
View(topo_hless)
cliques(graph_hless)
cliques_hless <- cliques(graph_hless)
cliques_hless <- as.data.frame(cliques(graph_hless))
cliques_hless <- cliques(graph_hless, min = 5)
cliques_hless <- as.data.frame(cliques(graph_hless, min = 5))
cliques(graph_hless, min = 5)
cliques_hless <- cliques(graph_hless, min = 10)
cliques_hless <- cliques(graph_hless, min = 7)
cliques_hless <- cliques(graph_hless, min = 6)
largest_cliques(graph_hless)
largest_cliques(graph_classified)
