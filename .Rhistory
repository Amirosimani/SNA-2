geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 1, color ="grey")
dev.off()
N = 3
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
library(data.table)
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
top100 <- from[1:100,]
selected <- people[people$from %in% top100$rn,]
library(plyr)
cdata <- ddply(selected, c("from", "to"), summarise)
cdata <- ddply(selected, c("from", "to"), summarise,   N = length(from))
View(cdata)
a <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
mat_sel <- cbind(selected$from, a,b)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel <- subset(mat_sel, V1 = NULL | from = NULL)
mat_sel <- subset(mat_sel, V1 == NULL | from == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NA )
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == "NA" )
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != 'NA']
mat_sel <- mat_sel[ V1 != 'NA' | from != '']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != '' | nchar(V1) < 15]
mat_sel <- mat_sel[ from != '']
mat_sel <- mat_sel[ nchar(V1) < 15 ]
View(mat_sel)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
a[, list(V1, V2, V3, V4, V5)]
a <- a[, list(V1, V2, V3, V4, V5)]
View(a)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel)
View(from)
View(selected)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
View(from)
top100 <- from[1:100,]
top100 <- top100[from != '']
View(top100)
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- a[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
recipients_sep <- recipients_sep[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
View(recipients_sep)
mat_sel <- cbind(selected$from, recipients_sep)
View(mat_sel)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel2 <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA']
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 25]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
View(mat_sel2)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
rm(mat_sel2)
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37]
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & v1 != '']
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata1)
View(cdata2)
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
View(cdata2)
View(cdata1)
recipients_sep <- recipients_sep[, list(V1, V2)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
rm(cdata)
View(cdata1)
View(cdata2)
View(cdata1)
cdata3 <- ddply(mat_sel, c("from", "V1","V2"), summarise,   N = length(from))
View(cdata3)
rm(cdata3)
rbind.fill(list(cdata1, cdata2)))
rbind.fill(list(cdata1, cdata2))
pp <- cbind(names=c(rownames(cdata1), rownames(cdata2)),
rbind.fill(list(cdata1, cdata2))
)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
source.with.encoding('~/GitHub/MWH/HillarySNA.R', encoding='UTF-8')
source.with.encoding('~/GitHub/MWH/HillarySNA.R', encoding='UTF-8')
setwd("~/GitHub/MWH")
source.with.encoding('~/GitHub/MWH/HillarySNA.R', encoding='UTF-8')
### 1. Improt data----
# 2.1 Set up connection to the SQLite database
library(DBI)
library(RSQLite)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
dbDisconnect(connection)
#2.2 drop unneccasry columns
library(data.table)
docs = data.table(docs)
DF = docs[,c("posted_date","pdf_link","author","doc_class","message_num","case_num",
"declass_date", "id","full_path","is_document","doc_date","pdf_url" ):=NULL]
#2.3 data wrangling
#classification
"secret=2, confidential =1, NA =0"
DF[is.na(classification),classification:=0]
DF$classification[DF$classification == 'CONFIDENTIAL'] = 1
DF$classification[DF$classification == 'SECRET'] = 2
#reason
DF[is.na(classification),classification:="0"]
DF$reason <- gsub(" ", "", DF$reason)
#subject
"check if the email was a reply"
setDT(DF)[subject %like% "RE:", message_type:=1] #reply: 1
setDT(DF)[subject %like% "FW:", message_type:=2] #forward: 2
DF[is.na(message_type),message_type:=0] #normal
#time & date
DF[, c("Date", "Time") := tstrsplit(date, " ", fixed=TRUE)]
DF[,c("date"):=NULL]
DF[, Date:=as.IDate(Date)]
DF[, Time:=as.ITime(Time)]
### 2. contact list ----
#senders and recievers
b<- setDT(tstrsplit(as.character(DF$body), "Subject:", fixed=TRUE))[]
b <- b[ ,`:=`(V2 = NULL, V3 = NULL, V4 = NULL)] #remove the body of messages
#nCC
c <- setDT(tstrsplit(as.character(b$V1), "Cc:", fixed=TRUE))[]
c2 <- c[ ,`:=`(V3 = NULL, V4 = NULL)]
c <- setDT(tstrsplit(as.character(c2$V2), "nSent:", fixed=TRUE))[]
c <- c[ ,`:=`(V2 = NULL)]
names(c)[names(c) == "V1"] = "cc" #extract CCs to a column
#nTo
d <- setDT(tstrsplit(as.character(c2$V1), "To:", fixed=TRUE))[]
d2 <- d[ ,`:=`(V3 = NULL, V4 = NULL, V5 = NULL, V6 = NULL)]
d <- setDT(tstrsplit(as.character(d2$V2), "Sent:", fixed=TRUE))[]
d <- d[ ,`:=`(V2 = NULL, V3=NULL)]
names(d)[names(d) == "V1"] = "to" #extract CCs to a column
#nFrom
e <- setDT(tstrsplit(as.character(d2$V1), "Sent:", fixed=TRUE))[]
e <- e[ ,`:=`(V2 = NULL)]
names(e)[names(e) == "V1"] = "from" #extract Senders to a column
#binding appropriate columns together
people <- cbind(e, d, c)
### 3. cleaning up and entitiy resoluition----
#senders
people$from  <- gsub("From:", "", people$from)
people <- as.data.frame(sapply(people, function(x) gsub("(<)(.*)(>)|([[])(.*)([]])|([(])(.*)([)])", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("(Sent)(.*)($)|(Classified)(.*)($)|(Action)(.*)($)|(mailto)(.*)($)|
(UNCLASSIFIED)(.*)($)|(Reason)(.*)($)|(Date)(.*)($)|
(Infullappreciation)(.*)($)|(RELEASEINPART)(.*)($)", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub('[[:space:]]', "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("\\\\n", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("(<)(.*)($)", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("([[])(.*)($)", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("([(])(.*)($)", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub(")", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("[(]", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("<", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub(">", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("•", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("»", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("«", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub('"', '', x)))
people <- as.data.frame(sapply(people, function(x) gsub(':', '', x)))
people <- as.data.frame(sapply(people, function(x) gsub('-', '', x)))
people <- as.data.frame(sapply(people, function(x) gsub(",", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("'", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("[.]", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("[*]", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("[+]", "", x)))
#cleaning up reciepeints
people$to  <- gsub("(CONFIDENTIAL)(.*)($)", "", people$to)
people$to  <- gsub("(just)(.*)($)", "", people$to)
people$to  <- gsub("(Famous)(.*)($)", "", people$to)
#cleaning up CCs
people$cc  <- gsub("(Subject)(.*)($)", "", people$cc)
people$cc  <- gsub("(\n\n)(.*)(\n\n)", "", people$cc)
people$cc  <- gsub("\n", "", people$cc)
people$cc  <- gsub("\\\\", "", people$cc)
#post-write gsubs
people <- as.data.frame(sapply(people, function(x) gsub("â–ª|â€ž|â€”", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("BESTCOPY", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub("B6|B1|B5|B61|B114|14", "", x)))
people <- as.data.frame(sapply(people, function(x) gsub('[0-9]+', "", x)))
#trim leading/tailing whitespae
people <- data.frame(lapply(people, trimws))
#name correction
#Huma Abedin
people <- as.data.frame(sapply(people, function(x) gsub('Hu ma|Hume|Humi|Hunia|Hunna|Htma|HuiTia', "Huma", x)))
people <- as.data.frame(sapply(people, function(x) gsub('Abed in|Abeclin', "Abedin", x)))
people <- as.data.frame(sapply(people, function(x) gsub('AbedinHuma|abedinh@stategov ', "HumaAbedin", x)))
people <- as.data.frame(sapply(people, function(x) gsub('abedinh@stategov|abedinh@stategov', "HumaAbedin", x)))
#Jake Sulivan
people <- as.data.frame(sapply(people, function(x) gsub('JacobJ|Jacobi|Jake', "Jacob", x)))
people <- as.data.frame(sapply(people, function(x) gsub('jakesullivan', "SullivanJacob", x)))
people <- as.data.frame(sapply(people, function(x) gsub('JacobSullivan', "SullivanJacob", x)))
people <- as.data.frame(sapply(people, function(x) gsub('SullivanJacobI|SullivanJacobJ', "SullivanJacob", x)))
people <- as.data.frame(sapply(people, function(x) gsub('sullivanjj@stategov|sullivanij@stategov', "SullivanJacob", x)))
#AnneMarie Slaughter
people <- as.data.frame(sapply(people, function(x) gsub('SlaughterAnneMarie', "AnneMarieSlaughter", x)))
#William Burns
people <- as.data.frame(sapply(people, function(x) gsub('WilliamJ', "William", x)))
#Hillary
people <- as.data.frame(sapply(people, function(x) gsub('HillaryClinton', "H", x)))
people <- as.data.frame(sapply(people, function(x) gsub('hr@mycingularblackberrynet|DR@clintonemailcoms|HDR@clintonemailcom|HDR@clintonemailcorn|HDR@clintonemailcom|HDR@clintonemallcom|HDR@clintonemallcomi|HDR@clintomailcom|HDR@clintomailcomi|HDR@clim', "H", x)))
#cherylmills
people <- as.data.frame(sapply(people, function(x) gsub('cherylmills', "CherylMills", x)))
people <- as.data.frame(sapply(people, function(x) gsub('MillsCherylD|millscd@stategov', "CherylMills", x)))
#OPSNEWs
people <- as.data.frame(sapply(people, function(x) gsub('OpsNewsTicker@stategov', "OpsNewsTicker", x)))
#Ross Alec
people <- as.data.frame(sapply(people, function(x) gsub('RossAlecJ', "RossAlec", x)))
#Valmoro Lona J
people <- as.data.frame(sapply(people, function(x) gsub('ValmoroLonaJ', "ValmoroLona", x)))
#Pverveer
people <- as.data.frame(sapply(people, function(x) gsub('pverveer', "pVerveer", x)))
#Jiloty Lauren C
people <- as.data.frame(sapply(people, function(x) gsub('JilotyLC@stategov', "JilotyLaurenC", x)))
#VerveerMelanneS
people <- as.data.frame(sapply(people, function(x) gsub('verveerms@stategov', "VerveerMelanneS", x)))
people <- as.data.frame(sapply(people, function(x) gsub('PowerSamanthaJ', "PowerSamantha", x)))
#writing csv file
write.csv(people, file = "people.csv")
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
write.csv(from, file = "from.csv")
from <- read.csv('/Users/Amiros/GitHub/MWH/from.csv', sep = ",")
top100 <- from[1:100,]
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
View(from)
names(from)
from$X <- NULL
View(top100)
top100 <- top100[rn != '']
names(from)
from <- read.csv('/Users/Amiros/GitHub/MWH/from.csv', sep = ",")
from$X <- NULL
View(from)
top100 <- from[1:100,]
View(top100)
top100 <- top100[rn != '']
top100 <- top100['rn' != '']
View(top100)
top100 <- top100[top100$rn != '']
View(top100)
colnames(top100) <- c("person", "freq")
View(top100)
top100 <- top100[person != '']
selected <- people[people$from %in% top100$rn,]
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
selected <- people[people$from %in% top100$rn,]
View(selected)
View(people)
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
top100 <- from[1:100,]
selected <- people[people$from %in% top100$rn,]
colnames(top100) <- c("person", "freq")
selected <- people[people$from %in% top100$person,]
View(selected)
selected <- selected[from != '']
top100 <- top100[person != '']
selected <- people[people$from %in% top100$person,]
View(selected)
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 29 & V1 != '']
View(mat_sel)
library(plyr)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
write.csv(cdata1, file = "edge_list.csv")
View(mat_sel)
View(cdata1)
edge_list <- read.csv('/Users/Amiros/GitHub/MWH/edge_list.csv', sep = ",")
rm(list = ls())
edge_list <- read.csv('/Users/Amiros/GitHub/MWH/edge_list.csv', sep = ",")
View(edge_list)
edge_list$X <- NULL
View(edge_list)
mat <- edge_list
View(mat)
mat$N <- NULL
a <- get.adjacency(graph.edgelist(as.matrix(mat)))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(mat)))
AdjacencyFromEdgelist(mat)
get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
adj_mat <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
rm(a)
from <- read.csv('/Users/Amiros/GitHub/MWH/from.csv', sep = ",")
from$X <- NULL
top100 <- from[1:100,]
colnames(top100) <- c("person", "freq")
top100 <- top100[person != '']
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
#sort senders based on frequecny
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
library(data.table)
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
top100 <- from[1:100,]
colnames(top100) <- c("person", "freq")
top100 <- top100[person != '']
selected <- people[people$from %in% top100$person,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 29 & V1 != '']
View(mat_sel)
adj_mat2 <- get.adjacency(graph.edgelist(as.matrix(mat_sel), directed=T))
adj_mat2
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))#with freq
write.csv(cdata1, file = "edge_list_aggregated.csv")
write.csv(mat_sel, file = "edge_list.csv")
rm(list = ls())
edge_list <- read.csv('/Users/Amiros/GitHub/MWH/edge_list.csv', sep = ",")
View(edge_list)
edge_list$X <- NULL
adj_mat <- get.adjacency(graph.edgelist(as.matrix(mat_sel), directed=T))
adj_mat <- get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T))
View(edge_list)
adj_mat
write.csv(adj_mat, file = "adj_mat1.csv")
write.csv(as.data.frame(adj_mat), file = "adj_mat1.csv")
a <- as.matrix(adj_mat)
View(a)
write.csv(adj_mm, file = "adj_mat1.csv")
adj_mm <- as.matrix(adj_mat)
write.csv(adj_mm, file = "adj_mat1.csv")
library(DBI)
library(RSQLite)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
dbDisconnect(connection)
#2.2 drop unneccasry columns
library(data.table)
docs = data.table(docs)
DF = docs[,c("posted_date","pdf_link","author","doc_class","message_num","case_num",
"declass_date", "id","full_path","is_document","doc_date","pdf_url" ):=NULL]
View(DF)
library(igraph)
Hillary_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
View(Hillary_matrix)
Hillary_graph <- graph.adjacency(Hillary_matrix,mode="directed")
Hillary_graph <- graph.adjacency(Hillary_matrix,mode="directed", weighted = TRUE)
summary(Hillary_matrix)
nrow(Hillary_matrix)
ncol(Hillary_matrix)
Hillary_matrix[1] <- NULL
Hillary_matrix$V1 <- NULL
Hillary_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
View(Hillary_matrix)
Hillary_matrix$V1 <- NULL
Hillary_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
setwd("~/GitHub/SNA #2")
hillary_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
rm(Hillary_matrix)
type(hillary_matrix)
str(hillary_matrix)
hillary_matrix <- hillary_matrix[,-1]
hillary_graph <- graph.adjacency(hillary_matrix,mode="directed", weighted = TRUE)
graph.density(hillary_graph, loops=T)
g_density = graph.density(hillary_graph, loops=T)
structure.info(hillary_graph)
vcount(hillary_graph)
ecount(hillary_graph)
vcount(hillary_graph)
ecount(hillary_graph)
g_density = graph.density(hillary_graph, loops=T)
indegreeG <- degree(hillary_graph, mode="in")
degree(hillary_graph, mode="in")
outdegreeG <- degree(hillary_graph, mode="out")
outdegreeG
totaldegreeG <- degree(g)
totaldegreeG <- degree(hillary_graph)
incloseness <- closeness(hillary_graph, mode='in')
outcloseness <- closeness(hillary_graph, mode='out')
outcloseness
totalcloseness <- closeness(hillary_graph)
betweenness <- betweenness(hillary_graph)
forumG <- data.frame(V(hillary_graph)$name, indegree, outdegree, totaldegree, incloseness,    outcloseness, totalcloseness, betweenness)
indegree <- degree(hillary_graph, mode="in")
outdegree <- degree(hillary_graph, mode="out")
totaldegree <- degree(hillary_graph)
forumG <- data.frame(V(hillary_graph)$name, indegree, outdegree, totaldegree, incloseness,    outcloseness, totalcloseness, betweenness)
View(forumG)
forumG <- data.frame(indegree, outdegree, totaldegree, incloseness,    outcloseness, totalcloseness, betweenness)
View(forumG)
indegree <- degree(hillary_graph, mode="in", loops = TRUE, normalized = FALSE)
outdegree <- degree(hillary_graph, mode="out", loops = TRUE, normalized = FALSE)
totaldegree <- degree(hillary_graph)
hillary_matrix <- as.matrix(read.csv(file.choose() ,header=TRUE,row.names=NULL,check.names=FALSE))
hillary_matrix <- hillary_matrix[,-1]
hillary_graph <- graph.adjacency(hillary_matrix,mode="directed", weighted = TRUE)
vcount(hillary_graph)
ecount(hillary_graph)
g_density = graph.density(hillary_graph, loops=T)
indegree <- degree(hillary_graph, mode="in", loops = TRUE, normalized = FALSE)
outdegree <- degree(hillary_graph, mode="out", loops = TRUE, normalized = FALSE)
totaldegree <- degree(hillary_graph)
betweenness <- betweenness(hillary_graph, directed = T)
closeness <- closeness(hillary_graph, mode = c("all"))
inDegree <- degree(hillary_graph, mode="in", loops = TRUE, normalized = FALSE)
outDegree <- degree(hillary_graph, mode="out", loops = TRUE, normalized = FALSE)
totalDegree <- degree(hillary_graph)
inCloseness <- closeness(hillary_graph, mode='in')
outCloseness <- closeness(hillary_graph, mode='out')
totalCloseness <- closeness(hillary_graph)
eigen <- evcent(hillary_graph)
bon <- bonpow(hillary_graph)
forum <- data.frame(inDegree, outDegree, totalDegree, inCloseness, outCloseness, totalCloseness, betweenness, eigen, bon)
View(forum)
forum <- data.frame(inDegree, outDegree, totalDegree, inCloseness, outCloseness, totalCloseness, betweenness, bon, eigen)
View(forum)
forum = forum[,c(1:10)]
View(forum)
forum = forum[,c(1:9)]
View(forum)
cor(forum)
cor <- cor(forum)
View(cor)
