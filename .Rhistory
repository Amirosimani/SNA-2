edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#rmeove the classification for igrpah
edge_list <- edge_classification[c(1,2)]
#entity resolution
edge_list <- mutate_each(edge_list, funs(tolower))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("latin1", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("ASCII", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('@stategov|@stategoy', "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("[[:punct:]]", "", x)))
#creat adjacency matrix
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#rmeove the classification for igrpah
edge_list <- edge_classification[c(1,2)]
#entity resolution
edge_list <- mutate_each(edge_list, funs(tolower))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("latin1", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("ASCII", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('@stategov|@stategoy', "", x)))
#edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("[[:punct:]]", "", x)))
#creat adjacency matrix
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
str(edge_list)
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("[[:punct:]]", "", x)))
str(edge_list)
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#rmeove the classification for igrpah
edge_list <- edge_classification[c(1,2)]
#entity resolution
edge_list <- mutate_each(edge_list, funs(tolower))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("latin1", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("ASCII", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('@stategov|@stategoy', "", x)))
#edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("[[:punct:]]", "", x)))
#creat adjacency matrix
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
hillary_graph <- graph.adjacency(adj_mat,mode="directed", weighted = TRUE)
node_names <- as.data.frame(V(hillary_graph)$name)
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.8){
edge_list$from[i] <- edge_list$from[j]
}
}
}
simmilarity_index <- function(x, y){
if (nchar(as.character(x)) >0 & nchar(as.character(y))>0){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
}
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.8){
edge_list$from[i] <- edge_list$from[j]
}
}
}
View(node_names)
simmilarity_index(edge_list$from[7], edge_list$from[8])
simmilarity_index <- function(x, y){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
simmilarity_index(edge_list$from[7], edge_list$from[8])
edge_list$from[7]
View(edge_list)
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
hillary_graph <- graph.adjacency(adj_mat,mode="directed", weighted = TRUE)
node_names <- as.data.frame(V(hillary_graph)$name)
View(node_names)
simmilarity_index(node_names[7,], node_names[8,])
simmilarity_index(node_names[10,], node_names[11,])
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.7){
edge_list$from[i] <- edge_list$from[j]
}
}
}
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$V1[i],edge_list$V1[j]) > 0.7){
edge_list$V1[i] <- edge_list$V1[j]
}
}
}
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
hillary_graph <- graph.adjacency(adj_mat,mode="directed", weighted = TRUE)
node_names <- as.data.frame(V(hillary_graph)$name)
View(node_names)
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('hdr@clintonemailcom', "h", x)))
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
hillary_graph <- graph.adjacency(adj_mat,mode="directed", weighted = TRUE)
node_names <- as.data.frame(V(hillary_graph)$name)
write.csv(node_names, file = "node_names.csv")
write.csv(edge_list, file = "edge_list.csv")
View(edge_classification)
View(edge_list)
View(edge_classification)
View(edge_classification)
edge_list$reason <- edge_classification$V3
write.csv(edge_list, file = "edge_list.csv")
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
edge_list <- edge_classification[c(1,2)]
View(edge_list)
adj_mat <- as.matrix(get.adjacency(graph.edgelist(as.matrix(edge_list), directed=T)))
hillary_graph <- graph.adjacency(adj_mat,mode="directed", weighted = TRUE)
node_names <- as.data.frame(V(hillary_graph)$name)
str(edge_classification$reason)
classified <- edge_classification[ which(edge_classification$V3 != NA, ]
classified <- edge_classification[ which(edge_classification$V3 != NA), ]
View(classified)
classified <- edge_classification[ which(edge_classification$V3 == NA), ]
View(edge_classification)
classified <- edge_classification[ which(edge_classification$reason != NA), ]
View(classified)
rm(classified)
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
View(edge_classification)
classified <- edge_classification[ which(edge_classification$reason != NA), ]
classified <- edge_classification[ which(edge_classification$reason == NA), ]
classified <- edge_classification[ is.na(edge_classification$reason),]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- unclassified[c(1,2)]
mat_classified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(classified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
graph_classified <- graph.adjacency(mat_classified,mode="directed", weighted = TRUE)
graph_unclassified <- graph.adjacency(mat_unclassified,mode="directed", weighted = TRUE)
centrality <- function(x){
inDegree <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegree <- degree(xh, mode="out", loops = TRUE, normalized = FALSE)
totalDegree <- degree(x)
inCloseness <- closeness(x, mode='in')
outCloseness <- closeness(x, mode='out')
totalCloseness <- closeness(x)
betweenness <- betweenness(x, directed = T)
eigen <- evcent(x)
bon <- bonpow(x)
summ <- data.frame(inDegree, outDegree, totalDegree, inCloseness, outCloseness, totalCloseness, betweenness, bon, eigen)
return(summ)
}
centrality(graph_classified)
centrality <- function(x){
inDegree <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegree <- degree(xh, mode="out", loops = TRUE, normalized = FALSE)
totalDegree <- degree(x)
inCloseness <- closeness(x, mode='in')
outCloseness <- closeness(x, mode='out')
totalCloseness <- closeness(x)
betweenness <- betweenness(x, directed = T)
eigen <- evcent(x)
bon <- bonpow(x)
summ <- data.frame(inDegree, outDegree, totalDegree, inCloseness, outCloseness, totalCloseness, betweenness, bon, eigen)
print(summ)
}
centrality(graph_classified)
centrality <- function(x){
inDegree <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegree <- degree(xh, mode="out", loops = TRUE, normalized = FALSE)
totalDegree <- degree(x)
"inCloseness <- closeness(x, mode='in')
outCloseness <- closeness(x, mode='out')
totalCloseness <- closeness(x)
betweenness <- betweenness(x, directed = T)
eigen <- evcent(x)
bon <- bonpow(x)"
summ <- data.frame(inDegree, outDegree, totalDegree)
return(summ)
}
centrality(graph_classified)
inDegreeC <- degree(graph_classified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(graph_classified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(graph_classified)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
bonC <- bonpow(graph_classified)
sumC <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, bonC, eigenC)
sumC = sumC[,c(1:9)]
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
bonU <- bonpow(graph_unclassified)
sumU <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, bonU, eigenU)
sumU = sumU[,c(1:9)]
bonU <- bonpow(graph_unclassified)
sumU <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
sumU = sumU[,c(1:9)]
View(sumC)
View(sumU)
corrC <- cor(sumC)
corrU <- cor(sumU)
View(corrC)
View(corrU)
View(corrC)
View(corrU)
View(corrC)
stuff <- function(x){
inDegreeC <- degree(graph_classified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(graph_classified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC)
return(s)
}
stuff(graph_classified)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC)
return(s)
}
stuff(graph_classified)
stuff(graph_unclassified)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
View(edge_classification)
setwd("~/GitHub/MWH")
library(DBI)
library(RSQLite)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
dbDisconnect(connection)
View(docs)
library(data.table)
docs = data.table(docs)
View(docs)
DF = docs[,c("posted_date","pdf_link","author","doc_class","message_num","case_num",
"declass_date", "id","full_path","is_document","doc_date","pdf_url" ):=NULL]
View(DF)
str(DF$classification)
str(docs)
DF$classification <- as.factor(DF$classification)
str(DF$classification)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
library(igraph)
library(stringdist)
library(dplyr)
### 2. create adjacency matrix ----
mat_classified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(classified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
# Create igraph object from this matrix
graph_classified <- graph.adjacency(mat_classified,mode="directed", weighted = TRUE)
graph_unclassified <- graph.adjacency(mat_unclassified,mode="directed", weighted = TRUE)
#node_names <- as.data.frame(V(hillary_graph)$name)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC)
return(s)
}
setwd("~/GitHub/SNA #2")
### 0. ent resolution ----
#similarity index
simmilarity_index <- function(x, y){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
#entity resolution
edge_list <- mutate_each(edge_list, funs(tolower))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("latin1", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("ASCII", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('@stategov|@stategoy', "", x)))
#edge_list <- as.data.frame(sapply(edge_list, function(x) gsub("[[:punct:]]", "", x)))
edge_list <- as.data.frame(sapply(edge_list, function(x) gsub('hdr@clintonemailcom', "h", x)))
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.7){
edge_list$from[i] <- edge_list$from[j]
}
}
}
for (i in 1:nrow(node_names)){
for (j in 1:i){
if (simmilarity_index(edge_list$V1[i],edge_list$V1[j]) > 0.7){
edge_list$V1[i] <- edge_list$V1[j]
}
}
}
write.csv(edge_list, file = "edge_list.csv")
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
### 2. create adjacency matrix ----
mat_classified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(classified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
# Create igraph object from this matrix
graph_classified <- graph.adjacency(mat_classified,mode="directed", weighted = TRUE)
graph_unclassified <- graph.adjacency(mat_unclassified,mode="directed", weighted = TRUE)
#node_names <- as.data.frame(V(hillary_graph)$name)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC)
return(s)
}
stuff(graph_unclassified)
table_unclass <- stuff(graph_unclassified)
View(table_unclass)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
return(s)
}
centrality_unclass <- stuff(graph_unclassified)
stuff(graph_unclassified)
inDegreeC <- degree(graph_classified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(graph_classified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(graph_classified)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
bonC <- bonpow(graph_classified)
sumC <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, bonC, eigenC)
sumC = sumC[,c(1:9)]
stuff(graph_classified)
centrality_classified <- stuff(graph_classified)
View(centrality_classified)
View(sumC)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC,  bonC, eigenC)
return(s)
}
centrality_classified <- stuff(graph_classified)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC,  bonC, eigenC)
s = s[,c(1:9)]
return(s)
}
centrality_classified <- stuff(graph_classified)
View(centrality_classified)
centrality_unclassified <- stuff(graph_unclassified)
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
bonU <- bonpow(graph_unclassified)
sumU <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
sumU = sumU[,c(1:9)]
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
sumU <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
sumU = sumU[,c(1:9)]
View(sumU)
bonU <- bonpow(graph_unclassified)
sumU = sumU[,c(1:8)]
View(sumU)
cntrlty_measures <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
s = s[,c(1:8)]
return(s)
}
centrality_classified <- cntrlty_measures(graph_classified)
centrality_unclassified <- cntrlty_measures(graph_unclassified)
### 1. importing data ----
#  Import  edge list with classifications
edge_classification <- read.csv('edge_list.csv', sep = ",")
edge_classification$X <- NULL
#seperating clsasified and non-classified edges
classified <- edge_classification[ is.na(edge_classification$reason),]
classified <- classified[c(1,2)]
unclassified <- edge_classification[ !is.na(edge_classification$reason),]
unclassified <- unclassified[c(1,2)]
### 2. create adjacency matrix ----
mat_classified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(classified), directed=T)))
mat_unclassified <- as.matrix(get.adjacency(graph.edgelist(as.matrix(unclassified), directed=T)))
# Create igraph object from this matrix
graph_classified <- graph.adjacency(mat_classified,mode="directed", weighted = TRUE)
graph_unclassified <- graph.adjacency(mat_unclassified,mode="directed", weighted = TRUE)
#node_names <- as.data.frame(V(hillary_graph)$name)
cntrlty_measures <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC, outClosenessC, totalClosenessC, betweennessC, eigenC)
s = s[,c(1:8)]
return(s)
}
inDegreeU <- degree(graph_unclassified, mode="in", loops = TRUE, normalized = FALSE)
outDegreeU <- degree(graph_unclassified, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeU <- degree(graph_unclassified)
inClosenessU <- closeness(graph_unclassified, mode='in')
outClosenessU <- closeness(graph_unclassified, mode='out')
totalClosenessU <- closeness(graph_unclassified)
betweennessU <- betweenness(graph_unclassified, directed = T)
eigenU <- evcent(graph_unclassified)
bonU <- bonpow(graph_unclassified)
sumU <- data.frame(inDegreeU, outDegreeU, totalDegreeU, inClosenessU, outClosenessU, totalClosenessU, betweennessU, eigenU)
sumU = sumU[,c(1:8)]
centrality_unclassified <- cntrlty_measures(graph_unclassified)
centrality_unclassified <- cntrlty_measures(graph_unclassified)
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
"outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)"
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC)
"s = s[,c(1:8)]"
return(s)
}
stuff <- function(x){
inDegreeC <- degree(x, mode="in", loops = TRUE, normalized = FALSE)
outDegreeC <- degree(x, mode="out", loops = TRUE, normalized = FALSE)
totalDegreeC <- degree(x)
inClosenessC <- closeness(graph_classified, mode='in')
"outClosenessC <- closeness(graph_classified, mode='out')
totalClosenessC <- closeness(graph_classified)
betweennessC <- betweenness(graph_classified, directed = T)
eigenC <- evcent(graph_classified)
#bonC <- bonpow(graph_classified)"
s <- data.frame(inDegreeC, outDegreeC, totalDegreeC, inClosenessC)
"s = s[,c(1:8)]"
return(s)
}
